<?php
/**
 * ModelSchedule
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BITOP
 *
 * Bmstu Open IT Platform
 *
 * OpenAPI spec version: 1.0
 * Contact: i@spatecon.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelSchedule Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelSchedule implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'model.Schedule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'group' => '\Swagger\Client\Model\ModelGroup',
        'is_numerator_first' => 'bool',
        'lessons' => '\Swagger\Client\Model\ModelScheduleLesson[]',
        'semester_end' => 'string',
        'semester_start' => 'string',
        'teacher' => '\Swagger\Client\Model\ModelTeacher',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'group' => null,
        'is_numerator_first' => null,
        'lessons' => null,
        'semester_end' => null,
        'semester_start' => null,
        'teacher' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'group' => 'group',
        'is_numerator_first' => 'is_numerator_first',
        'lessons' => 'lessons',
        'semester_end' => 'semester_end',
        'semester_start' => 'semester_start',
        'teacher' => 'teacher',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'group' => 'setGroup',
        'is_numerator_first' => 'setIsNumeratorFirst',
        'lessons' => 'setLessons',
        'semester_end' => 'setSemesterEnd',
        'semester_start' => 'setSemesterStart',
        'teacher' => 'setTeacher',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'group' => 'getGroup',
        'is_numerator_first' => 'getIsNumeratorFirst',
        'lessons' => 'getLessons',
        'semester_end' => 'getSemesterEnd',
        'semester_start' => 'getSemesterStart',
        'teacher' => 'getTeacher',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_TEACHER = 'teacher';
    const TYPE_GROUP = 'group';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TEACHER,
            self::TYPE_GROUP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['is_numerator_first'] = isset($data['is_numerator_first']) ? $data['is_numerator_first'] : null;
        $this->container['lessons'] = isset($data['lessons']) ? $data['lessons'] : null;
        $this->container['semester_end'] = isset($data['semester_end']) ? $data['semester_end'] : null;
        $this->container['semester_start'] = isset($data['semester_start']) ? $data['semester_start'] : null;
        $this->container['teacher'] = isset($data['teacher']) ? $data['teacher'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets group
     *
     * @return \Swagger\Client\Model\ModelGroup
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \Swagger\Client\Model\ModelGroup $group nullable
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets is_numerator_first
     *
     * @return bool
     */
    public function getIsNumeratorFirst()
    {
        return $this->container['is_numerator_first'];
    }

    /**
     * Sets is_numerator_first
     *
     * @param bool $is_numerator_first is_numerator_first
     *
     * @return $this
     */
    public function setIsNumeratorFirst($is_numerator_first)
    {
        $this->container['is_numerator_first'] = $is_numerator_first;

        return $this;
    }

    /**
     * Gets lessons
     *
     * @return \Swagger\Client\Model\ModelScheduleLesson[]
     */
    public function getLessons()
    {
        return $this->container['lessons'];
    }

    /**
     * Sets lessons
     *
     * @param \Swagger\Client\Model\ModelScheduleLesson[] $lessons lessons
     *
     * @return $this
     */
    public function setLessons($lessons)
    {
        $this->container['lessons'] = $lessons;

        return $this;
    }

    /**
     * Gets semester_end
     *
     * @return string
     */
    public function getSemesterEnd()
    {
        return $this->container['semester_end'];
    }

    /**
     * Sets semester_end
     *
     * @param string $semester_end semester_end
     *
     * @return $this
     */
    public function setSemesterEnd($semester_end)
    {
        $this->container['semester_end'] = $semester_end;

        return $this;
    }

    /**
     * Gets semester_start
     *
     * @return string
     */
    public function getSemesterStart()
    {
        return $this->container['semester_start'];
    }

    /**
     * Sets semester_start
     *
     * @param string $semester_start semester_start
     *
     * @return $this
     */
    public function setSemesterStart($semester_start)
    {
        $this->container['semester_start'] = $semester_start;

        return $this;
    }

    /**
     * Gets teacher
     *
     * @return \Swagger\Client\Model\ModelTeacher
     */
    public function getTeacher()
    {
        return $this->container['teacher'];
    }

    /**
     * Sets teacher
     *
     * @param \Swagger\Client\Model\ModelTeacher $teacher nullable
     *
     * @return $this
     */
    public function setTeacher($teacher)
    {
        $this->container['teacher'] = $teacher;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


