<?php
/**
 * NewsListRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BITOP
 *
 * Bmstu Open IT Platform
 *
 * OpenAPI spec version: 1.0
 * Contact: i@spatecon.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NewsListRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NewsListRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'news.listRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ignore_deferring' => 'bool',
        'page' => 'int',
        'page_size' => 'int',
        'title_filter' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ignore_deferring' => null,
        'page' => null,
        'page_size' => null,
        'title_filter' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ignore_deferring' => 'ignore_deferring',
        'page' => 'page',
        'page_size' => 'page_size',
        'title_filter' => 'title_filter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ignore_deferring' => 'setIgnoreDeferring',
        'page' => 'setPage',
        'page_size' => 'setPageSize',
        'title_filter' => 'setTitleFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ignore_deferring' => 'getIgnoreDeferring',
        'page' => 'getPage',
        'page_size' => 'getPageSize',
        'title_filter' => 'getTitleFilter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ignore_deferring'] = isset($data['ignore_deferring']) ? $data['ignore_deferring'] : false;
        $this->container['page'] = isset($data['page']) ? $data['page'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['title_filter'] = isset($data['title_filter']) ? $data['title_filter'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['page_size']) && ($this->container['page_size'] > 50)) {
            $invalidProperties[] = "invalid value for 'page_size', must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['page_size']) && ($this->container['page_size'] < 1)) {
            $invalidProperties[] = "invalid value for 'page_size', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ignore_deferring
     *
     * @return bool
     */
    public function getIgnoreDeferring()
    {
        return $this->container['ignore_deferring'];
    }

    /**
     * Sets ignore_deferring
     *
     * @param bool $ignore_deferring Р•СЃР»Рё true - РІ РІС‹Р±РѕСЂРєСѓ РґРѕРїРѕР»РЅРёС‚РµР»СЊРЅРѕ РїРѕРїР°РґСѓС‚ РѕС‚Р»РѕР¶РµРЅРЅС‹Рµ РЅРѕРІРѕСЃС‚Рё
     *
     * @return $this
     */
    public function setIgnoreDeferring($ignore_deferring)
    {
        $this->container['ignore_deferring'] = $ignore_deferring;

        return $this;
    }

    /**
     * Gets page
     *
     * @return int
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int $page РЎС‚СЂР°РЅРёС†Р° РїР°РіРёРЅР°С†РёРё. Р Р°Р±РѕС‚Р°РµС‚ РІ СЃРІСЏР·РєРµ СЃ page_size
     *
     * @return $this
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size РљРѕР»РёС‡РµСЃС‚РІРѕ РЅРѕРІРѕСЃС‚РµР№ РЅР° СЃС‚СЂР°РЅРёС†Рµ
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {

        if (!is_null($page_size) && ($page_size > 50)) {
            throw new \InvalidArgumentException('invalid value for $page_size when calling NewsListRequest., must be smaller than or equal to 50.');
        }
        if (!is_null($page_size) && ($page_size < 1)) {
            throw new \InvalidArgumentException('invalid value for $page_size when calling NewsListRequest., must be bigger than or equal to 1.');
        }

        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets title_filter
     *
     * @return string
     */
    public function getTitleFilter()
    {
        return $this->container['title_filter'];
    }

    /**
     * Sets title_filter
     *
     * @param string $title_filter Р¤РёР»СЊС‚СЂ. Р’ РІС‹Р±РѕСЂРєСѓ РїРѕРїР°РґСѓС‚ С‚РѕР»СЊРєРѕ С‚Рµ РЅРѕРІРѕСЃС‚Рё, РІ Р·Р°РіРѕР»РѕРІРєРµ РєРѕС‚РѕСЂС‹С… Р±СѓРґРµС‚ РЅР°Р№РґРµРЅР° РїРµСЂРµРґР°РЅРЅР°СЏ СЃС‚СЂРѕРєР°
     *
     * @return $this
     */
    public function setTitleFilter($title_filter)
    {
        $this->container['title_filter'] = $title_filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


